    - name: change master ip in jenkins job
      shell: cat {{ project_path }}/ansible/hosts | grep k8s-master | awk '{ print $2 }' | cut -d '=' -f2
      register: IP_ADDR_OF_MASTER

    - name: change master ip in jenkins job
      shell: sed -i "s/xxx.xxx.xxx.xxx/{{ IP_ADDR_OF_MASTER.stdout }}/g" {{ project_path }}/ansible/config.xml

    - name: change node ip in jenkins job
      shell: cat {{ project_path }}/ansible/hosts | grep k8s-node | awk '{ print $2 }' | cut -d '=' -f2
      register: IP_ADDR_OF_NODE

    - name: change node ip in jenkins job
      shell: sed -i "s/yyy.yyy.yyy.yyy/{{ IP_ADDR_OF_NODE.stdout }}/g" {{ project_path }}/ansible/config.xml

    - name: change aws_access_key_id in jenkins job
      shell: echo {{ aws_access_key_id }} | sed 's/\//\\\//g'
      register: aws_access_key_id_modified

    - name: change aws_access_key_id in jenkins job
      shell: sed -i "s/ccccccccccccccccccccccccccccc/{{ aws_access_key_id_modified.stdout }}/g" {{ project_path }}/ansible/config.xml

    - name: change aws_secret_access_key in jenkins job
      shell: echo {{ aws_secret_access_key }} | sed 's/\//\\\//g'
      register: aws_secret_access_key_modified

    - name: change aws_secret_access_key in jenkins job
      shell: sed -i "s/dddddddddddddddddddddddd/{{ aws_secret_access_key_modified.stdout }}/g" {{ project_path }}/ansible/config.xml

    - name: change aws_account_id in jenkins job
      shell: sed -i "s/aaaaaaaaaaaaa/{{ aws_account_id }}/g" {{ project_path }}/ansible/config.xml

    - name: change aws_account_id in jenkins job
      shell: sed -i "s/<region>/{{ aws_region }}/g" {{ project_path }}/ansible/config.xml

    - name: ensure the jenkins apt repository key is installed
      apt_key: url=https://pkg.jenkins.io/debian-stable/jenkins.io.key state=present
      become: yes

    - name: ensure the repository is configured
      apt_repository: repo='deb https://pkg.jenkins.io/debian-stable binary/' state=present
      become: yes

    - name: ensure java is installed
      apt: name=openjdk-11-jdk update_cache=yes
      become: yes

    - name: ensure jenkins is installed
      apt: name=jenkins update_cache=yes
      become: yes

    - name: ensure jenkins is running
      service: name=jenkins state=started

    - name: read admin pwd
      shell: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: adminpwd

    - name: unlock and add admin user
      jenkins_script:
       script: |
        import jenkins.model.*
        import hudson.security.*
        def instance = Jenkins.getInstance()
        def hudsonRealm = new HudsonPrivateSecurityRealm(false)
        hudsonRealm.createAccount('jenkins', '${user_pwd}')
        instance.setSecurityRealm(hudsonRealm)
        def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
        strategy.setAllowAnonymousRead(false)
        instance.setAuthorizationStrategy(strategy)
        instance.save()
       args:
        user_pwd: "{{ jenkins_password }}"
       user: admin
       password: "{{ adminpwd.stdout }}"

    - name: complete setup wizard
      jenkins_script:
       script: |
        import static jenkins.model.Jenkins.instance as jenkins
        import jenkins.install.InstallState
        if (!jenkins.installState.isSetupComplete()) {
          InstallState.INITIAL_SETUP_COMPLETED.initializeState()
        }
       user: admin
       password: "{{ adminpwd.stdout }}"

    - name: install plugin
      jenkins_plugin:
       name: "{{ item }}"
       state: latest
       url_username: admin
       url_password: "{{ adminpwd.stdout }}"
      with_items: "{{ jenkins_plugins }}"
      ignore_errors: True

    - name: restart jenkins
      service: name=jenkins state=restarted

    - name: Create a jenkins job using basic authentication
      community.general.jenkins_job:
        config: "{{ lookup('file', '{{ project_path }}/ansible/config.xml') }}"
        name: initial-deploy
        password: "{{ jenkins_password }}"
        url: http://{{ ansible_host }}:8080
        user: jenkins

    - name: give docker permission to jenkins user
      shell: usermod -aG docker jenkins

    - name: run jenkins with root user
      shell: "echo 'jenkins    ALL = NOPASSWD: /usr/bin/docker' >> /etc/sudouers"

    - name: restart jenkins
      service: name=jenkins state=restarted

    - name: Create a jenkins build using basic authentication
      community.general.jenkins_build:
        name: "initial-deploy"
        state: present
        user: jenkins
        password: "{{ jenkins_password }}"
        url: http://{{ ansible_host }}:8080
        
    - name: cat node /tmp/publicip
      shell: cat /tmp/publicip
      register: publicip

    - debug:
        msg: "{{ publicip.stdout }}"

    - name: get public ip
      shell: curl ifconfig.me
      register: public_ip

    - name: vim jenkins /tmp/jenkinsinfo
      shell: echo "Also you can login to the jenkins with jenkins/{{ jenkins_password }} credentials in http://{{ public_ip.stdout }}:8080" > /tmp/jenkinsinfo
      register: jenkinsinfo

    - name: cat jenkins /tmp/jenkinsinfo
      shell: cat /tmp/jenkinsinfo
      register: jenkinsinfo

    - debug:
        msg: "{{ jenkinsinfo.stdout }}"